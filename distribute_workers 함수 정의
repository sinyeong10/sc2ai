`async def distribute_workers(self, resource_ratio: float = 2):`

**distribute_workers 함수 정의 및 주석**

- 점령된 모든 기지에 일꾼들을 분배 → 결과적으로 함수는 게임 내의 일꾼들을 자원 수집에 최적화하여 재배치하려고 시도
- resource_ratio 매개변수
    - 미네랄 대 가스의 현재 비율 > resource_ratio → 가스 건물을 채우려고 시도, 그렇지 않으면 미네랄 캐기를 선호
    - 이 함수는 최적화되지 않았으며, 사용자는 더 정교한 제어를 원하면 자체 배포 함수를 작성해야 합니다.
        - For example long distance mining control and moving workers if a base was killed
        are not being handled.
        - WARNING: This is quite slow when there are lots of workers or multiple bases
- 초기 체크
    - `if not self.mineral_field or not self.workers or not self.townhalls.ready:    return`
        - 미네랄 필드, 일꾼, 또는 준비된 타운홀이 없으면 함수는 아무 일도 수행하지 않고 종료
        - 결과적으로 초기 조건을 만족하지 않는 경우 함수는 변경 없이 게임의 상태를 그대로 유지
    - `worker_pool = self.workers.idle`
        - 현재 게임에서 아무 일도 하고 있지 않은 일꾼들의 목록을 `worker_pool`에 저장 → 후에 자원 수집을 위해 이 일꾼들을 재배치할 때 사용
    - `bases = self.townhalls.readygas_buildings = self.gas_buildings.ready`
        - 건물, 가스 건물 정보 가져오기
    - `deficit_mining_places = []`
        - 채광 장소 초기화 → 나중에 일꾼들이 부족한 채광 장소를 식별하는 데 사용

⇒ 일꾼 배치를 시작하기 전에 초기 조건을 체크하고, 필요한 데이터와 목록을 준비

- `for mining_place in bases | gas_buildings:`
    - `bases | gas_buildings`는 기지(`bases`)와 가스 건물(`gas_buildings`)을 합친 총 목록
    - 이 반복문은 총 목록의 각 채광 장소에 대해 실행
    - `difference = mining_place.surplus_harvesters`
        - 각 채광 장소(`mining_place`)에 대해, 현재 배치된 일꾼의 수와 이상적인 일꾼의 수와의 차이를 계산
    - `if not difference:    continue`
        - 적절한 일꾼 수 확인
        - 만약 해당 채광 장소에 일꾼 수가 적절하다면(차이가 없다면), 다음 채광 장소로 넘어감
    - `if mining_place.has_vespene:    local_workers = self.workers.filter(        lambda unit: unit.order_target == mining_place.tag or                     (unit.is_carrying_vespene and unit.order_target == bases.closest_to(mining_place).tag)    )`
        - 가스 채광 장소의 일꾼 확인
        - `mining_place.has_vespene`가 참이면 해당 장소는 가스 채광 장소.
        - 이 경우, 현재 해당 가스 건물을 대상으로 하거나 해당 가스 건물에서 가스를 운반하고 있는 일꾼들의 목록을 가져옴
    - `else:    local_minerals_tags = {        mineral.tag        for mineral in self.mineral_field if mineral.distance_to(mining_place) <= 8    }    local_workers = self.workers.filter(        lambda unit: unit.order_target in local_minerals_tags or                     (unit.is_carrying_minerals and unit.order_target == mining_place.tag)    )`
        - 미네랄 채광 장소의 일꾼 확인
        - `mining_place.has_vespene`가 거짓이면 해당 장소는 미네랄 채광 장소
        - 먼저 해당 채광 장소 주변의 미네랄 필드의 태그 목록을 생성
        - 그 후, 해당 미네랄 필드에서 일하고 있는 일꾼들의 목록을 가져옴.

⇒ 요약하면, 이 코드 부분은 각 채광 장소(가스 건물 또는 미네랄 필드)를 순회하며 해당 장소에 배치된 일꾼의 수를 확인하고, 그 장소에서 일하고 있는 일꾼들의 목록을 가져옴

```python
if difference > 0:
	for worker in local_workers[:difference]:
		worker_pool.append(worker)
```

- `difference > 0` → 해당 채광 장소에 배치된 일꾼의 수 > 이상적인 수
- 초과하는 일꾼들을 게임 내에서 재배치하기 위해 `worker_pool`에 추가
- 이 때 `local_workers[:difference]`는 초과하는 일꾼 수만큼의 일꾼 리스트를 가져옴

```python
else:
	deficit_mining_places += [mining_place for _ in range(-difference)]
```

- `difference`가 음수인 경우, 해당 채광 장소에 필요한 일꾼이 부족하다는 것을 의미
- `deficit_mining_places` 리스트에는 일꾼이 부족한 채광 장소를 여러 번 추가 → 부족한 일꾼 수만큼 동일한 채광 장소를 추가하는 것은, 나중에 일꾼을 재배치할 때 이 채광 장소를 우선적으로 고려하기 위함

⇒ 요약하면, 이 코드 부분은 채광 장소에 할당된 일꾼의 수가 너무 많거나 적은 경우 그에 따라 일꾼들을 재배치하기 위한 준비를 합니다. 너무 많은 일꾼들은 **`worker_pool`**에 추가되고, 부족한 채광 장소는 `deficit_mining_places` 목록에 반복적으로 추가됩니다

```python
if len(worker_pool) > len(deficit_mining_places): 
```

- 이 조건은 `worker_pool`에 있는 일꾼의 수 > `deficit_mining_places`의 채광 장소 수 → 참
- 즉, 일꾼들을 재배치할 장소보다 더 많은 일꾼이 대기 중일 때 참입니다.

```python
all_minerals_near_base = [        
		mineral for mineral in self.mineral_field        
		if any(mineral.distance_to(base) <= 8 for base in self.townhalls.ready)    
	]
```

- 이 코드는 현재 게임 내의 모든 미네랄 필드(`self.mineral_field`) 중에서 각 기지(`self.townhalls.ready`)로부터 거리가 8 이하인 미네랄만 선택하여 목록을 생성
- 이렇게 생성된 목록(`all_minerals_near_base`)은 나중에 대기 중인 일꾼들을 가장 가까운 미네랄로 보내기 위해 사용

⇒ 요약하면, 이 코드 부분은 일꾼들이 더 많이 대기 중일 때, 그 일꾼들을 어디로 보낼지 결정하기 위해 모든 기지 주변의 미네랄 필드 목록을 준비합니다. 이 목록은 후속 코드에서 대기 중인 일꾼들을 적절한 미네랄로 보내기 위해 사용될 것입니다.

적절한 일꾼 수 확인:
각 채광 장소에서 현재 일꾼의 수와 필요한 일꾼의 수를 확인합니다. 결과적으로 이 단계에서는 어떤 채광 장소에 일꾼이 부족한지, 어디에 초과한 일꾼이 있는지 판단하게 됩니다.

일꾼 재배치 준비:
일꾼들을 가장 가까운 미네랄 패치로 보내기 위한 데이터를 준비합니다.

일꾼 재배치:
부족한 채광 장소가 있으면 일꾼들을 적절한 장소로 보냅니다. 결과적으로 자원 수집이 최적화됩니다.

초과 일꾼 처리:
더 분배할 일꾼이 있고 해당 일꾼이 아무 일도 하지 않는다면, 그 일꾼은 가장 가까운 미네랄로 보내집니다. 그렇지 않으면, 일꾼은 움직이지 않습니다. 결과적으로 불필요한 이동 없이 이미 작업 중인 일꾼은 그 작업을 계속 수행하게 됩니다.

최종 결과: 이 함수를 호출하면 일꾼들이 게임 내에서 자원 수집을 최적화하기 위해 적절히 재배치됩니다. 일꾼들은 미네랄 또는 가스 수집에 필요한 곳으로 이동하여 전체적인 자원 수집 효율성을 향상시킵니다.
